{"mappings":"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tD,IAAM,EAA6C,CAC/C,CACI,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CACjF,CAAE,CACC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CACjF,CAAE,CACC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CACjF,CAAE,CACC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CACjF,CAAE,CACC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CACjF,CAAE,CACC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CACjF,CAAE,CACC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CACjF,CAAE,CACC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CACjF,CAAE,CACC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CACjF,CAAE,CACC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CACjF,CAAE,CACC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CACjF,CAAE,CACC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CACjF,CAAE,CACC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CACjF,CAAE,CACC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CACjF,CAAE,CACC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CACjF,CAAE,CACC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CACjF,CAAE,CACC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CACj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","sources":["<anon>","src/main.ts","src/utils/Options.ts","src/utils/EntityManager.ts","src/utils/Vector2.ts","src/utils/App.ts","src/utils/Physics.ts","src/utils/Renderer.ts"],"sourcesContent":["class $3099865926cec06a$export$c019608e5b5bb4cb {\n    //FIXME: добавить возможность настраивать вещи налету\n    constructor({ debug: debug }){\n        if ($3099865926cec06a$export$c019608e5b5bb4cb._instance) return $3099865926cec06a$export$c019608e5b5bb4cb._instance;\n        $3099865926cec06a$export$c019608e5b5bb4cb._instance = this;\n        this.gravity = 9.8;\n        this.precalc = {\n            circleAngle: 2 * Math.PI\n        };\n        this.timeSpeedCoefficient = 1;\n        this.physicsIterations = 8;\n        this.friction = 0.90;\n        this.debug = !!debug;\n    }\n}\n\n\nclass $0f6bd7f5a80a8d98$export$ac4bca90992eed1 {\n    static new(x, y) {\n        return {\n            x: x ?? 0,\n            y: y ?? 0\n        };\n    }\n    static multiplyScalar({ x: x, y: y }, num) {\n        return {\n            x: x * num,\n            y: y * num\n        };\n    }\n    static add(v1, v2) {\n        return {\n            x: v1.x + v2.x,\n            y: v1.y + v2.y\n        };\n    }\n    static subtract(v1, v2) {\n        return {\n            x: v1.x - v2.x,\n            y: v1.y - v2.y\n        };\n    }\n    static dot(v1, v2) {\n        return v1.x * v2.x + v1.y * v2.y;\n    }\n    static magnitude({ x: x, y: y }) {\n        return Math.sqrt(x * x + y * y);\n    }\n    static normalize({ x: x, y: y }) {\n        const magnitude = $0f6bd7f5a80a8d98$export$ac4bca90992eed1.magnitude({\n            x: x,\n            y: y\n        });\n        return {\n            x: x / magnitude,\n            y: y / magnitude\n        };\n    }\n    static collisionNormal(collisionPoint, position) {\n        return $0f6bd7f5a80a8d98$export$ac4bca90992eed1.normalize($0f6bd7f5a80a8d98$export$ac4bca90992eed1.subtract(collisionPoint, position));\n    }\n    static reflectFromPoint(collisionPoint, position, velocity) {\n        const normal = $0f6bd7f5a80a8d98$export$ac4bca90992eed1.collisionNormal(collisionPoint, position);\n        return $0f6bd7f5a80a8d98$export$ac4bca90992eed1.subtract(velocity, $0f6bd7f5a80a8d98$export$ac4bca90992eed1.multiplyScalar(normal, 2 * $0f6bd7f5a80a8d98$export$ac4bca90992eed1.dot(velocity, normal)));\n    }\n    static reflectFromNormal(vector, normal) {\n        // v' = v - 2 * (v ∙ n/n ∙ n) * n\n        return $0f6bd7f5a80a8d98$export$ac4bca90992eed1.subtract(vector, $0f6bd7f5a80a8d98$export$ac4bca90992eed1.multiplyScalar(normal, 2 * $0f6bd7f5a80a8d98$export$ac4bca90992eed1.dot(vector, normal) / $0f6bd7f5a80a8d98$export$ac4bca90992eed1.dot(normal, normal)));\n    }\n}\n\n\nclass $713e4dac7758b778$export$c7b7134fd828a5 {\n    constructor(){\n        this.addParticle = (props)=>{\n            this.particles.push({\n                id: this.particles.length,\n                mass: props.mass ?? 1,\n                radius: props.radius ?? 5,\n                color: props.color ?? \"blue\",\n                position: props.position ?? (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(0, 0),\n                velocity: props.velocity ?? (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(0, 0),\n                relativeVelocity: (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(0, 0)\n            });\n        };\n        //TODO: add possibility to create diagonal obstacles\n        this.addObstacle = (x, y, w, h)=>{\n            this.obstacles.push({\n                data: [\n                    x,\n                    y,\n                    w,\n                    h\n                ]\n            });\n        };\n        if ($713e4dac7758b778$export$c7b7134fd828a5._instance) return $713e4dac7758b778$export$c7b7134fd828a5._instance;\n        $713e4dac7758b778$export$c7b7134fd828a5._instance = this;\n        this.particles = [];\n        this.obstacles = [];\n    }\n}\n\n\n\nclass $dc2d49eb9a6d3720$export$2f09efa5b67124a7 {\n    static prepareFrame(entityManager, options, app) {\n        const iterationsMax = options.physicsIterations;\n        /**\r\n         * FIXME: нужно переделать колижен респонсы чтобы они затрагивали только текущий интервал, иначе нельзя будет запараллелить вычисления\r\n         * Сейчас симуляция стабильно работает при радиусе партиклов >5 на моей машине, хотелось бы поменьше.\r\n         * Нужна оптимизация + увеличение итераций физики\r\n         */ for(let x = 0; x < iterationsMax; x++){\n            //FIXME: figure out why Array constructor doesn`t work\n            const possibleCollisions = [\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ],\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ],\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ],\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ],\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ],\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ],\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ],\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ],\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ],\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ],\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ],\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ],\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ],\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ],\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ],\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ],\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ],\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ],\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ],\n                [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ]\n            ];\n            //разбиение на клетки работает, насколько я могу судить.\n            //вроде как единственная проблема с текущим алгоритмом - это размер партиклов, если он больше клетки, то смэрть\n            for(let i = 0; i < entityManager.particles.length; i++){\n                const { position: position, id: id, radius: radius } = entityManager.particles[i];\n                const xStart = Math.floor((position.x - radius) / app.gridWidth);\n                const xEnd = Math.floor((position.x + radius) / app.gridWidth);\n                const yStart = Math.floor((position.y - radius) / app.gridHeight);\n                const yEnd = Math.floor((position.y + radius) / app.gridHeight);\n                possibleCollisions[xStart][yStart].push(id);\n                if (xStart !== xEnd) possibleCollisions[xEnd][yStart].push(id);\n                if (yEnd !== yStart) {\n                    possibleCollisions[xStart][yEnd].push(id);\n                    if (xStart !== xEnd) possibleCollisions[xEnd][yEnd].push(id);\n                }\n            }\n            for(let i = 0; i < entityManager.particles.length; i++)$dc2d49eb9a6d3720$export$2f09efa5b67124a7._resolveObstacleCollisions(i, entityManager, options);\n            $dc2d49eb9a6d3720$export$2f09efa5b67124a7._resolveParticleCollisions(entityManager, options, possibleCollisions);\n            for(let i = 0; i < entityManager.particles.length; i++){\n                const { position: position, velocity: velocity } = entityManager.particles[i];\n                const newVelocity = (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(velocity.x, velocity.y + options.gravity);\n                const newRelativeVelocity = $dc2d49eb9a6d3720$export$2f09efa5b67124a7.getRelativeVelocity(newVelocity, app, iterationsMax);\n                const newPosition = (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(position.x + newRelativeVelocity.x, position.y + newRelativeVelocity.y);\n                entityManager.particles[i] = {\n                    ...entityManager.particles[i],\n                    velocity: newVelocity,\n                    relativeVelocity: newRelativeVelocity,\n                    position: newPosition\n                };\n            }\n        }\n    }\n    static _particleIntersectsObstacle(obstacle, position, radius) {\n        const { data: [rectX, rectY, rectWidth, rectHeight] } = obstacle;\n        const rectHalfWidth = rectWidth / 2;\n        const rectHalfHeight = rectHeight / 2;\n        const rectCenterX = Math.abs(rectX + rectHalfWidth);\n        const rectCenterY = Math.abs(rectY + rectHalfHeight);\n        const circleDistance = (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(Math.abs(position.x - rectCenterX), Math.abs(position.y - rectCenterY));\n        if (circleDistance.x > rectHalfWidth + radius) return false;\n        if (circleDistance.y > rectHalfHeight + radius) return false;\n        if (circleDistance.x <= rectHalfWidth) return true;\n        if (circleDistance.y <= rectHalfHeight) return true;\n        const cornerDistanceSquared = (circleDistance.x - rectHalfWidth) * 2 + (circleDistance.y - rectHalfHeight) * 2;\n        return cornerDistanceSquared <= radius * 2;\n    }\n    //FIXME: Separate collision detection from collision response to allow for event listeners\n    static _resolveObstacleCollisions(particleIndex, entityManager, options) {\n        for(let i = 0; i < entityManager.obstacles.length; i++){\n            // eslint-disable-next-line prefer-const\n            let { position: newPosition, velocity: newVelocity, radius: radius } = entityManager.particles[particleIndex];\n            if ($dc2d49eb9a6d3720$export$2f09efa5b67124a7._particleIntersectsObstacle(entityManager.obstacles[i], newPosition, radius)) {\n                const { data: [rectX, rectY, rectWidth, rectHeight] } = entityManager.obstacles[i];\n                const obstacleLeftX = rectX;\n                const obstacleRightX = rectX + rectWidth;\n                const obstacleTopY = rectY;\n                const obstacleBottomY = rectY + rectHeight;\n                const collisionPoint = (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(newPosition.x < obstacleLeftX ? obstacleLeftX : newPosition.x > obstacleRightX ? obstacleRightX : newPosition.x, newPosition.y < obstacleTopY ? obstacleTopY : newPosition.y > obstacleBottomY ? obstacleBottomY : newPosition.y);\n                const distance = Math.sqrt(Math.pow(collisionPoint.x - newPosition.x, 2) + Math.pow(collisionPoint.y - newPosition.y, 2));\n                const intersectionDepth = radius - distance;\n                if (intersectionDepth > 0) {\n                    //if particle intersects obstacle, move particle away\n                    const newDx = (newPosition.x - collisionPoint.x) / distance;\n                    const newDy = (newPosition.y - collisionPoint.y) / distance;\n                    newPosition = (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(newPosition.x + newDx * intersectionDepth, newPosition.y + newDy * intersectionDepth);\n                }\n                entityManager.particles[particleIndex] = {\n                    ...entityManager.particles[particleIndex],\n                    position: newPosition,\n                    velocity: $dc2d49eb9a6d3720$export$2f09efa5b67124a7.applyFriction((0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).reflectFromPoint(collisionPoint, newPosition, newVelocity), options)\n                };\n            }\n        }\n    }\n    static _resolveParticleCollisions(entityManager, options, possibleCollisions) {\n        possibleCollisions.forEach((column)=>{\n            column.forEach((row)=>{\n                row.forEach((particleIndex)=>{\n                    // eslint-disable-next-line prefer-const\n                    let { position: newPosition, velocity: newVelocity, radius: radius } = entityManager.particles[particleIndex];\n                    row.forEach((anotherParticleIndex)=>{\n                        if (anotherParticleIndex === particleIndex) return;\n                        // eslint-disable-next-line prefer-const\n                        let { position: cPosition, velocity: cVelocity, radius: cRadius } = entityManager.particles[anotherParticleIndex];\n                        const distanceX = cPosition.x - newPosition.x;\n                        const distanceY = cPosition.y - newPosition.y;\n                        const centerDistance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);\n                        if (centerDistance < radius * 2) {\n                            //check if particles intersect\n                            const intersectionDepth = radius + cRadius - centerDistance;\n                            //if they intersect, move them apart evenly\n                            if (intersectionDepth > 0) {\n                                const newDx = distanceX / centerDistance;\n                                const newDy = distanceY / centerDistance;\n                                newPosition = (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(newPosition.x - newDx * intersectionDepth / 2, newPosition.y - newDy * intersectionDepth / 2);\n                                cPosition = (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(cPosition.x + newDx * intersectionDepth / 2, cPosition.y + newDy * intersectionDepth / 2);\n                            }\n                            const collisionPoint = (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).add((0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).multiplyScalar(newPosition, radius / (radius + radius)), (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).multiplyScalar(cPosition, cRadius / (cRadius + cRadius)));\n                            entityManager.particles[particleIndex] = {\n                                ...entityManager.particles[particleIndex],\n                                position: newPosition,\n                                velocity: $dc2d49eb9a6d3720$export$2f09efa5b67124a7.applyFriction((0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).reflectFromPoint(collisionPoint, cPosition, newVelocity), options)\n                            };\n                            entityManager.particles[anotherParticleIndex] = {\n                                ...entityManager.particles[anotherParticleIndex],\n                                position: cPosition,\n                                velocity: $dc2d49eb9a6d3720$export$2f09efa5b67124a7.applyFriction((0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).reflectFromPoint(collisionPoint, newPosition, cVelocity), options)\n                            };\n                        }\n                    });\n                });\n            });\n        });\n    }\n    static applyFriction(v, options) {\n        return (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).multiplyScalar(v, options.friction);\n    }\n    static getRelativeVelocity(v, app, iterationsMax) {\n        return {\n            x: v.x * app.deltaTime / iterationsMax,\n            y: v.y * app.deltaTime / iterationsMax\n        };\n    }\n}\n\n\nclass $f7ea042211b1de9a$export$88530751e3977073 {\n    static drawFrame(app, options, entityManager) {\n        app.context.clearRect(0, 0, app.canvas.width, app.canvas.height);\n        entityManager.particles.forEach(({ position: position, color: color, radius: radius })=>{\n            app.context.beginPath();\n            app.context.fillStyle = color;\n            app.context.arc(position.x, position.y, radius, 0, options.precalc.circleAngle);\n            app.context.fill();\n        });\n        this._drawObstacles(app, entityManager.obstacles);\n        if (options.debug) this._drawDebugInfo(app, entityManager);\n    }\n    static _drawDebugInfo(app, entityManager) {\n        app.context.fillStyle = \"black\";\n        app.context.fillText(String(entityManager.particles.length), 10, 10);\n        // TODO: для каждого партикла\n        // app.context.fillStyle = 'black'\n        // app.context.fillText(String(id), position.x, position.y)\n        const { gridWidth: gridWidth, gridHeight: gridHeight } = app;\n        //FIXME: make grid resolution choosable\n        for(let i = 0; i <= 20; i++){\n            app.context.strokeStyle = \"lightgreen\";\n            app.context.beginPath();\n            app.context.moveTo((i + 1) * gridWidth, 0);\n            app.context.lineTo((i + 1) * gridWidth, app.canvas.clientHeight);\n            app.context.stroke();\n            app.context.beginPath();\n            app.context.moveTo(0, (i + 1) * gridHeight);\n            app.context.lineTo(app.canvas.clientWidth, (i + 1) * gridHeight);\n            app.context.stroke();\n            app.context.fillText(`${i}, ${i}`, (i + 0.45) * gridWidth, (i + 0.5) * gridHeight);\n        }\n    }\n    static _drawObstacles(app, obstacles) {\n        app.context.fillStyle = \"grey\";\n        obstacles.forEach(({ data: data })=>{\n            app.context.fillRect(...data);\n        });\n    }\n}\n\n\nclass $14ff683d0d2d0b78$export$86fbec116b87613f {\n    constructor(options, entityManager){\n        if ($14ff683d0d2d0b78$export$86fbec116b87613f._instance) return $14ff683d0d2d0b78$export$86fbec116b87613f._instance;\n        $14ff683d0d2d0b78$export$86fbec116b87613f._instance = this;\n        this.canvas = document.getElementById(\"canvas\");\n        this.context = this.canvas.getContext(\"2d\");\n        this.dpr = window.devicePixelRatio || 1;\n        this.rawDeltaTime = performance.now();\n        this.lastFrameTime = this.rawDeltaTime;\n        this.isPaused = false;\n        this.options = options;\n        this.entityManager = entityManager;\n        //TODO: сделать настраиваемым\n        this.gridWidth = this.canvas.clientWidth / 20;\n        this.gridHeight = this.canvas.clientHeight / 20;\n        this.update = this.update.bind(this);\n        this.onPause = this.onPause.bind(this);\n    }\n    init() {\n        this.canvas.width = document.body.clientWidth * this.dpr;\n        this.canvas.height = document.body.clientHeight * this.dpr;\n        //TODO: integrate stepping\n        // if (this.options.debug) {\n        //     window.addEventListener('click', () => {\n        //         this.rawDeltaTime = 1\n        //         this.lastFrameTime = 1\n        //         Physics.prepareFrame(this.entityManager, this.options, this)\n        //         Renderer.drawFrame(this, this.options, this.entityManager)\n        //     })\n        // }\n        window.addEventListener(\"click\", this.onPause);\n        window.requestAnimationFrame(this.update);\n    }\n    update(frameTime) {\n        this.rawDeltaTime = 1 / 60 * this.options.timeSpeedCoefficient;\n        this.lastFrameTime = frameTime;\n        window.requestAnimationFrame(this.update);\n        if (this.isPaused) return;\n        (0, $dc2d49eb9a6d3720$export$2f09efa5b67124a7).prepareFrame(this.entityManager, this.options, this);\n        (0, $f7ea042211b1de9a$export$88530751e3977073).drawFrame(this, this.options, this.entityManager);\n    }\n    onPause() {\n        this.isPaused = !this.isPaused;\n    }\n    get deltaTime() {\n        return this.rawDeltaTime;\n    }\n}\n\n\n\nconst $deded05a08b16674$var$options = new (0, $3099865926cec06a$export$c019608e5b5bb4cb)({\n    debug: false\n});\nconst $deded05a08b16674$var$entityManager = new (0, $713e4dac7758b778$export$c7b7134fd828a5)();\n$deded05a08b16674$var$entityManager.addObstacle(0, 800, 510, 20);\n$deded05a08b16674$var$entityManager.addObstacle(0, 0, 20, 800);\n$deded05a08b16674$var$entityManager.addObstacle(490, 0, 20, 800);\n$deded05a08b16674$var$entityManager.addObstacle(0, 0, 500, 20);\nconst $deded05a08b16674$var$app = new (0, $14ff683d0d2d0b78$export$86fbec116b87613f)($deded05a08b16674$var$options, $deded05a08b16674$var$entityManager);\n$deded05a08b16674$var$app.init();\nsetInterval(()=>{\n    if ($deded05a08b16674$var$entityManager.particles.length >= 2000) return;\n    $deded05a08b16674$var$entityManager.addParticle({\n        position: (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(30, 30),\n        velocity: (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(5, 0),\n        color: \"green\",\n        mass: 1,\n        radius: 5\n    });\n    $deded05a08b16674$var$entityManager.addParticle({\n        position: (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(60, 30),\n        velocity: (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(5, 0),\n        color: \"red\",\n        mass: 1,\n        radius: 5\n    });\n    $deded05a08b16674$var$entityManager.addParticle({\n        position: (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(90, 30),\n        velocity: (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(5, 0),\n        color: \"blue\",\n        mass: 1,\n        radius: 5\n    });\n    $deded05a08b16674$var$entityManager.addParticle({\n        position: (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(120, 30),\n        velocity: (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(5, 0),\n        color: \"pink\",\n        mass: 1,\n        radius: 5\n    });\n    $deded05a08b16674$var$entityManager.addParticle({\n        position: (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(150, 30),\n        velocity: (0, $0f6bd7f5a80a8d98$export$ac4bca90992eed1).new(5, 0),\n        color: \"pink\",\n        mass: 1,\n        radius: 5\n    });\n}, 150);\n\n\n//# sourceMappingURL=index.99606423.js.map\n","import { Options } from './utils/Options'\r\nimport { EntityManager } from './utils/EntityManager'\r\nimport { App } from './utils/App'\r\nimport { Vec2 } from './utils/Vector2'\r\n\r\nconst options = new Options({ debug: false })\r\n\r\nconst entityManager = new EntityManager()\r\n\r\nentityManager.addObstacle( 0, 800, 510, 20)\r\nentityManager.addObstacle(0, 0, 20, 800)\r\nentityManager.addObstacle(490, 0, 20, 800)\r\nentityManager.addObstacle(0, 0, 500, 20)\r\n\r\nconst app = new App(options, entityManager)\r\napp.init()\r\n\r\nsetInterval(() => {\r\n    if (entityManager.particles.length >= 2000) return\r\n\r\n    entityManager.addParticle({\r\n        position: Vec2.new(30, 30),\r\n        velocity: Vec2.new(5, 0),\r\n        color: 'green',\r\n        mass: 1,\r\n        radius: 5,\r\n    })\r\n    entityManager.addParticle({\r\n        position: Vec2.new(60, 30),\r\n        velocity: Vec2.new(5, 0),\r\n        color: 'red',\r\n        mass: 1,\r\n        radius: 5,\r\n    })\r\n    entityManager.addParticle({\r\n        position: Vec2.new(90, 30),\r\n        velocity: Vec2.new(5, 0),\r\n        color: 'blue',\r\n        mass: 1,\r\n        radius: 5,\r\n    })\r\n    entityManager.addParticle({\r\n        position: Vec2.new(120, 30),\r\n        velocity: Vec2.new(5, 0),\r\n        color: 'pink',\r\n        mass: 1,\r\n        radius: 5,\r\n    })\r\n    entityManager.addParticle({\r\n        position: Vec2.new(150, 30),\r\n        velocity: Vec2.new(5, 0),\r\n        color: 'pink',\r\n        mass: 1,\r\n        radius: 5,\r\n    })\r\n}, 150)\r\n","export class Options {\r\n    gravity: number\r\n    precalc: { circleAngle: number }\r\n    timeSpeedCoefficient: number\r\n    friction: number\r\n    debug: boolean\r\n    physicsIterations: number\r\n    private static _instance?: Options\r\n\r\n    //FIXME: добавить возможность настраивать вещи налету\r\n    constructor({ debug } : { debug?: boolean }) {\r\n        if (Options._instance) {\r\n            return Options._instance\r\n        }\r\n        Options._instance = this\r\n        this.gravity = 9.8\r\n        this.precalc = { circleAngle: 2 * Math.PI }\r\n        this.timeSpeedCoefficient = 1\r\n        this.physicsIterations = 8\r\n        this.friction = 0.90\r\n        this.debug = !!debug\r\n    }\r\n}\r\n","import { Obstacle, Particle } from '../types/common'\r\nimport { Vec2 } from './Vector2'\r\n\r\nexport class EntityManager {\r\n    readonly particles: Particle[]\r\n    readonly obstacles: Obstacle[]\r\n    private static _instance?: EntityManager\r\n\r\n    constructor() {\r\n        if (EntityManager._instance) {\r\n            return EntityManager._instance\r\n        }\r\n        EntityManager._instance = this\r\n        this.particles = []\r\n        this.obstacles = []\r\n    }\r\n\r\n    addParticle = (props: Omit<Partial<Particle>, 'id'>) => {\r\n        this.particles.push({\r\n            id: this.particles.length,\r\n            mass: props.mass ?? 1,\r\n            radius: props.radius ?? 5,\r\n            color: props.color ?? 'blue',\r\n            position: props.position ?? Vec2.new(0, 0),\r\n            velocity: props.velocity ?? Vec2.new(0, 0),\r\n            relativeVelocity: Vec2.new(0, 0),\r\n        })\r\n    }\r\n\r\n    //TODO: add possibility to create diagonal obstacles\r\n    addObstacle = (x: number, y: number, w: number, h: number) => {\r\n        this.obstacles.push({\r\n            data: [ x, y, w, h ],\r\n        })\r\n    }\r\n}\r\n","import { Vector2 } from '../types/common'\r\n\r\nexport class Vec2 {\r\n\r\n    static new(x?: number, y?: number): Vector2 {\r\n        return {\r\n            x : x ?? 0,\r\n            y : y ?? 0\r\n        }\r\n    }\r\n\r\n    static multiplyScalar({ x, y }: Vector2, num: number): Vector2 {\r\n        return {\r\n            x: x * num,\r\n            y: y * num\r\n        }\r\n    }\r\n\r\n    static add(v1: Vector2, v2: Vector2): Vector2 {\r\n        return {\r\n            x: v1.x + v2.x,\r\n            y: v1.y + v2.y\r\n        }\r\n    }\r\n\r\n    static subtract(v1: Vector2, v2: Vector2): Vector2 {\r\n        return {\r\n            x: v1.x - v2.x,\r\n            y: v1.y - v2.y\r\n        }\r\n    }\r\n\r\n    static dot(v1: Vector2, v2: Vector2): number {\r\n        return v1.x * v2.x + v1.y * v2.y\r\n    }\r\n\r\n    static magnitude({ x, y }: Vector2): number {\r\n        return Math.sqrt(x * x + y * y)\r\n    }\r\n\r\n    static normalize({ x, y }: Vector2): Vector2 {\r\n        const magnitude = Vec2.magnitude({ x, y })\r\n\r\n        return {\r\n            x: x / magnitude,\r\n            y: y / magnitude\r\n        }\r\n    }\r\n\r\n    static collisionNormal(collisionPoint: Vector2, position: Vector2): Vector2 {\r\n        return Vec2.normalize(Vec2.subtract(collisionPoint, position))\r\n    }\r\n\r\n    static reflectFromPoint(collisionPoint: Vector2, position: Vector2, velocity: Vector2): Vector2 {\r\n        const normal = Vec2.collisionNormal(collisionPoint, position)\r\n\r\n        return Vec2.subtract(velocity, Vec2.multiplyScalar(normal, 2 * Vec2.dot(velocity, normal)))\r\n    }\r\n\r\n    static reflectFromNormal(vector: Vector2, normal: Vector2) {\r\n        // v' = v - 2 * (v ∙ n/n ∙ n) * n\r\n        return Vec2.subtract(\r\n            vector,\r\n            Vec2.multiplyScalar(\r\n                normal,\r\n                (2 * Vec2.dot(vector, normal) / Vec2.dot(normal, normal))\r\n            )\r\n        )\r\n    }\r\n\r\n}\r\n","import { Options } from './Options'\r\nimport { EntityManager } from './EntityManager'\r\nimport { Physics } from './Physics'\r\nimport { Renderer } from './Renderer'\r\n\r\nexport class App {\r\n    //FIXME: сделать сеттеры/геттеры\r\n    canvas: HTMLCanvasElement\r\n    context: CanvasRenderingContext2D\r\n    dpr: number\r\n    rawDeltaTime: number\r\n    lastFrameTime: number\r\n    isPaused: boolean\r\n    gridHeight: number\r\n    gridWidth: number\r\n    private static _instance?: App\r\n    readonly entityManager: EntityManager\r\n    readonly options: Options\r\n\r\n    constructor(options: Options, entityManager: EntityManager) {\r\n        if (App._instance) {\r\n            return App._instance\r\n        }\r\n        App._instance = this\r\n        this.canvas = document.getElementById('canvas') as HTMLCanvasElement\r\n        this.context = this.canvas.getContext('2d')\r\n        this.dpr = window.devicePixelRatio || 1\r\n        this.rawDeltaTime = performance.now()\r\n        this.lastFrameTime = this.rawDeltaTime\r\n        this.isPaused = false\r\n        this.options = options\r\n        this.entityManager = entityManager\r\n        //TODO: сделать настраиваемым\r\n        this.gridWidth = this.canvas.clientWidth / 20\r\n        this.gridHeight = this.canvas.clientHeight / 20\r\n\r\n        this.update = this.update.bind(this)\r\n        this.onPause = this.onPause.bind(this)\r\n    }\r\n\r\n    init() {\r\n        this.canvas.width = document.body.clientWidth * this.dpr\r\n        this.canvas.height = document.body.clientHeight * this.dpr\r\n\r\n        //TODO: integrate stepping\r\n        // if (this.options.debug) {\r\n        //     window.addEventListener('click', () => {\r\n        //         this.rawDeltaTime = 1\r\n        //         this.lastFrameTime = 1\r\n        //         Physics.prepareFrame(this.entityManager, this.options, this)\r\n        //         Renderer.drawFrame(this, this.options, this.entityManager)\r\n        //     })\r\n        // }\r\n        window.addEventListener('click', this.onPause)\r\n        window.requestAnimationFrame(this.update)\r\n\r\n    }\r\n\r\n    update(frameTime: number) {\r\n        this.rawDeltaTime = 1 / 60 * this.options.timeSpeedCoefficient\r\n        this.lastFrameTime = frameTime\r\n\r\n        window.requestAnimationFrame(this.update)\r\n        if (this.isPaused) return\r\n\r\n        Physics.prepareFrame(this.entityManager, this.options, this)\r\n        Renderer.drawFrame(this, this.options, this.entityManager)\r\n    }\r\n\r\n    onPause(){\r\n        this.isPaused = !this.isPaused\r\n    }\r\n\r\n    get deltaTime() {\r\n        return this.rawDeltaTime\r\n    }\r\n\r\n}\r\n","import { Obstacle, PossibleCollisionsData, Vector2 } from '../types/common'\r\nimport { Vec2 } from './Vector2'\r\nimport { Options } from './Options'\r\nimport { App } from './App'\r\nimport { EntityManager } from './EntityManager'\r\n\r\nexport class Physics {\r\n    static prepareFrame(entityManager: EntityManager, options: Options, app: App) {\r\n        const iterationsMax = options.physicsIterations\r\n\r\n        /**\r\n         * FIXME: нужно переделать колижен респонсы чтобы они затрагивали только текущий интервал, иначе нельзя будет запараллелить вычисления\r\n         * Сейчас симуляция стабильно работает при радиусе партиклов >5 на моей машине, хотелось бы поменьше.\r\n         * Нужна оптимизация + увеличение итераций физики\r\n         */\r\n        for (let x = 0; x < iterationsMax; x++) {\r\n\r\n            //FIXME: figure out why Array constructor doesn`t work\r\n            const possibleCollisions: PossibleCollisionsData = [\r\n                [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ], [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ], [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ], [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ], [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ], [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ], [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ], [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ], [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ], [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ], [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ], [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ], [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ], [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ], [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ], [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ], [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ], [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ], [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ], [\r\n                    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []\r\n                ],\r\n            ]\r\n\r\n            //разбиение на клетки работает, насколько я могу судить.\r\n            //вроде как единственная проблема с текущим алгоритмом - это размер партиклов, если он больше клетки, то смэрть\r\n            for (let i = 0; i < entityManager.particles.length; i++) {\r\n                const {\r\n                    position,\r\n                    id,\r\n                    radius\r\n                } = entityManager.particles[i]\r\n\r\n                const xStart = Math.floor((position.x - radius) / app.gridWidth)\r\n                const xEnd = Math.floor((position.x + radius) / app.gridWidth)\r\n\r\n                const yStart = Math.floor((position.y - radius) / app.gridHeight)\r\n                const yEnd = Math.floor((position.y + radius) / app.gridHeight)\r\n\r\n                possibleCollisions[xStart][yStart].push(id)\r\n\r\n                if (xStart !== xEnd) {\r\n                    possibleCollisions[xEnd][yStart].push(id)\r\n                }\r\n\r\n                if (yEnd !== yStart) {\r\n                    possibleCollisions[xStart][yEnd].push(id)\r\n\r\n                    if (xStart !== xEnd) {\r\n                        possibleCollisions[xEnd][yEnd].push(id)\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < entityManager.particles.length; i++) {\r\n                Physics._resolveObstacleCollisions(i, entityManager, options)\r\n            }\r\n\r\n            Physics._resolveParticleCollisions(entityManager, options, possibleCollisions)\r\n\r\n            for (let i = 0; i <entityManager.particles.length; i++) {\r\n                const {\r\n                    position,\r\n                    velocity\r\n                } = entityManager.particles[i]\r\n\r\n                const newVelocity = Vec2.new(velocity.x, velocity.y + options.gravity)\r\n                const newRelativeVelocity = Physics.getRelativeVelocity(newVelocity, app, iterationsMax)\r\n                const newPosition = Vec2.new(position.x + newRelativeVelocity.x, position.y + newRelativeVelocity.y)\r\n\r\n                entityManager.particles[i] = {\r\n                    ...entityManager.particles[i],\r\n                    velocity: newVelocity,\r\n                    relativeVelocity: newRelativeVelocity,\r\n                    position: newPosition,\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _particleIntersectsObstacle(obstacle: Obstacle, position: Vector2, radius: number) {\r\n        const { data: [ rectX, rectY, rectWidth, rectHeight ] } = obstacle\r\n\r\n        const rectHalfWidth = rectWidth / 2\r\n        const rectHalfHeight = rectHeight / 2\r\n\r\n        const rectCenterX = Math.abs(rectX + rectHalfWidth)\r\n        const rectCenterY = Math.abs(rectY + rectHalfHeight)\r\n        const circleDistance = Vec2.new(\r\n            Math.abs(position.x - rectCenterX),\r\n            Math.abs(position.y - rectCenterY)\r\n        )\r\n\r\n        if (circleDistance.x > rectHalfWidth + radius) return false\r\n        if (circleDistance.y > rectHalfHeight + radius) return false\r\n        if (circleDistance.x <= rectHalfWidth) return true\r\n        if (circleDistance.y <= rectHalfHeight) return true\r\n\r\n        const cornerDistanceSquared = (circleDistance.x - rectHalfWidth) * 2 + (circleDistance.y - rectHalfHeight) * 2\r\n\r\n        return cornerDistanceSquared <= radius * 2\r\n    }\r\n\r\n    //FIXME: Separate collision detection from collision response to allow for event listeners\r\n    private static _resolveObstacleCollisions(\r\n        particleIndex: number,\r\n        entityManager: EntityManager,\r\n        options: Options,\r\n    ) {\r\n        for (let i = 0; i < entityManager.obstacles.length; i++) {\r\n\r\n            // eslint-disable-next-line prefer-const\r\n            let { position: newPosition, velocity: newVelocity, radius } = entityManager.particles[particleIndex]\r\n\r\n            if (Physics._particleIntersectsObstacle(entityManager.obstacles[i], newPosition, radius)) {\r\n                const { data: [ rectX, rectY, rectWidth, rectHeight ] } = entityManager.obstacles[i]\r\n\r\n                const obstacleLeftX = rectX\r\n                const obstacleRightX = rectX + rectWidth\r\n                const obstacleTopY = rectY\r\n                const obstacleBottomY = rectY + rectHeight\r\n\r\n                const collisionPoint = Vec2.new(\r\n                    newPosition.x < obstacleLeftX\r\n                        ? obstacleLeftX : newPosition.x > obstacleRightX\r\n                            ? obstacleRightX : newPosition.x,\r\n                    newPosition.y < obstacleTopY\r\n                        ? obstacleTopY : newPosition.y > obstacleBottomY\r\n                            ? obstacleBottomY : newPosition.y\r\n                )\r\n\r\n                const distance = Math.sqrt(\r\n                    Math.pow(collisionPoint.x - newPosition.x, 2)\r\n                    + Math.pow(collisionPoint.y - newPosition.y, 2)\r\n                )\r\n\r\n                const intersectionDepth = radius - distance\r\n\r\n                if (intersectionDepth > 0) {\r\n                    //if particle intersects obstacle, move particle away\r\n\r\n                    const newDx = (newPosition.x - collisionPoint.x) / distance\r\n                    const newDy = (newPosition.y - collisionPoint.y) / distance\r\n                    newPosition = Vec2.new(\r\n                        newPosition.x + newDx * intersectionDepth,\r\n                        newPosition.y + newDy * intersectionDepth,\r\n                    )\r\n                }\r\n\r\n                entityManager.particles[particleIndex] = {\r\n                    ...entityManager.particles[particleIndex],\r\n                    position: newPosition,\r\n                    velocity: Physics.applyFriction(\r\n                        Vec2.reflectFromPoint(collisionPoint, newPosition, newVelocity), options\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _resolveParticleCollisions(\r\n        entityManager: EntityManager,\r\n        options: Options,\r\n        possibleCollisions: PossibleCollisionsData\r\n    ) {\r\n        possibleCollisions.forEach((column) => {\r\n            column.forEach((row) => {\r\n                row.forEach((particleIndex) => {\r\n                    // eslint-disable-next-line prefer-const\r\n                    let { position: newPosition, velocity: newVelocity, radius } = entityManager.particles[particleIndex]\r\n\r\n                    row.forEach((anotherParticleIndex) => {\r\n                        if (anotherParticleIndex === particleIndex) return\r\n\r\n                        // eslint-disable-next-line prefer-const\r\n                        let { position: cPosition, velocity: cVelocity, radius: cRadius} = entityManager.particles[anotherParticleIndex]\r\n\r\n                        const distanceX = cPosition.x - newPosition.x\r\n                        const distanceY = cPosition.y - newPosition.y\r\n                        const centerDistance = Math.sqrt(distanceX * distanceX + distanceY * distanceY)\r\n\r\n                        if (centerDistance < radius * 2) {\r\n                            //check if particles intersect\r\n                            const intersectionDepth = radius + cRadius - centerDistance\r\n\r\n                            //if they intersect, move them apart evenly\r\n                            if (intersectionDepth > 0) {\r\n                                const newDx = distanceX / centerDistance\r\n                                const newDy = distanceY / centerDistance\r\n\r\n                                newPosition = Vec2.new(\r\n                                    newPosition.x - newDx * intersectionDepth / 2,\r\n                                    newPosition.y - newDy * intersectionDepth / 2,\r\n                                )\r\n\r\n                                cPosition = Vec2.new(\r\n                                    cPosition.x + newDx * intersectionDepth / 2,\r\n                                    cPosition.y + newDy * intersectionDepth / 2,\r\n                                )\r\n                            }\r\n\r\n                            const collisionPoint = Vec2.add(\r\n                                Vec2.multiplyScalar(newPosition, radius / (radius + radius)),\r\n                                Vec2.multiplyScalar(cPosition, cRadius / (cRadius + cRadius))\r\n                            )\r\n\r\n                            entityManager.particles[particleIndex] = {\r\n                                ...entityManager.particles[particleIndex],\r\n                                position: newPosition,\r\n                                velocity: Physics.applyFriction(\r\n                                    Vec2.reflectFromPoint(collisionPoint, cPosition, newVelocity),\r\n                                    options\r\n                                )\r\n                            }\r\n\r\n                            entityManager.particles[anotherParticleIndex] = {\r\n                                ...entityManager.particles[anotherParticleIndex],\r\n                                position: cPosition,\r\n                                velocity: Physics.applyFriction(\r\n                                    Vec2.reflectFromPoint(collisionPoint, newPosition, cVelocity),\r\n                                    options\r\n                                )\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    static applyFriction(v: Vector2, options: Options): Vector2 {\r\n        return Vec2.multiplyScalar(v, options.friction)\r\n    }\r\n\r\n    static getRelativeVelocity(v: Vector2, app: App, iterationsMax: number): Vector2 {\r\n        return {\r\n            x: v.x * app.deltaTime / iterationsMax,\r\n            y: v.y * app.deltaTime / iterationsMax\r\n        }\r\n    }\r\n}\r\n","import { App } from './App'\r\nimport { Options } from './Options'\r\nimport { EntityManager } from './EntityManager'\r\nimport { Obstacle } from '../types/common'\r\n\r\nexport class Renderer {\r\n    static drawFrame(app: App, options: Options, entityManager: EntityManager) {\r\n        app.context.clearRect(0, 0, app.canvas.width, app.canvas.height)\r\n        entityManager.particles.forEach(({ position, color, radius }) => {\r\n            app.context.beginPath()\r\n            app.context.fillStyle = color\r\n            app.context.arc(position.x, position.y, radius, 0, options.precalc.circleAngle)\r\n            app.context.fill()\r\n\r\n        })\r\n        this._drawObstacles(app, entityManager.obstacles)\r\n        if (options.debug) {\r\n            this._drawDebugInfo(app, entityManager)\r\n        }\r\n    }\r\n\r\n    private static _drawDebugInfo(app: App, entityManager: EntityManager) {\r\n        app.context.fillStyle = 'black'\r\n        app.context.fillText(String(entityManager.particles.length), 10, 10)\r\n\r\n        // TODO: для каждого партикла\r\n        // app.context.fillStyle = 'black'\r\n        // app.context.fillText(String(id), position.x, position.y)\r\n\r\n        const { gridWidth, gridHeight } = app\r\n\r\n        //FIXME: make grid resolution choosable\r\n        for (let i = 0; i <= 20; i++) {\r\n            app.context.strokeStyle = 'lightgreen'\r\n            app.context.beginPath()\r\n            app.context.moveTo((i + 1) * gridWidth, 0)\r\n            app.context.lineTo((i + 1) * gridWidth, app.canvas.clientHeight)\r\n            app.context.stroke()\r\n\r\n            app.context.beginPath()\r\n            app.context.moveTo( 0, (i + 1) * gridHeight)\r\n            app.context.lineTo(app.canvas.clientWidth, (i + 1) * gridHeight )\r\n            app.context.stroke()\r\n\r\n            app.context.fillText(`${i}, ${i}`, (i + 0.45) * gridWidth, (i + 0.5) * gridHeight)\r\n        }\r\n    }\r\n\r\n    private static _drawObstacles(app: App, obstacles: Obstacle[]) {\r\n        app.context.fillStyle = 'grey'\r\n        obstacles.forEach(({ data }) => {\r\n            app.context.fillRect(...data)\r\n        })\r\n    }\r\n}\r\n"],"names":["$3099865926cec06a$export$c019608e5b5bb4cb","constructor","debug","_instance","gravity","precalc","circleAngle","Math","PI","timeSpeedCoefficient","physicsIterations","friction","$0f6bd7f5a80a8d98$export$ac4bca90992eed1","new","x","y","multiplyScalar","num","add","v1","v2","subtract","dot","magnitude","sqrt","normalize","collisionNormal","collisionPoint","position","reflectFromPoint","velocity","normal","reflectFromNormal","vector","$713e4dac7758b778$export$c7b7134fd828a5","addParticle","props","particles","push","id","length","mass","radius","color","relativeVelocity","addObstacle","w","h","obstacles","data","$dc2d49eb9a6d3720$export$2f09efa5b67124a7","prepareFrame","entityManager","options","app","iterationsMax","possibleCollisions","i","xStart","floor","gridWidth","xEnd","yStart","gridHeight","yEnd","_resolveObstacleCollisions","_resolveParticleCollisions","newVelocity","newRelativeVelocity","getRelativeVelocity","newPosition","_particleIntersectsObstacle","obstacle","rectX","rectY","rectWidth","rectHeight","rectHalfWidth","rectHalfHeight","circleDistance","abs","cornerDistanceSquared","particleIndex","obstacleRightX","obstacleBottomY","distance","pow","intersectionDepth","newDx","newDy","applyFriction","forEach","column","row","anotherParticleIndex","cPosition","cVelocity","cRadius","distanceX","distanceY","centerDistance","v","deltaTime","$f7ea042211b1de9a$export$88530751e3977073","drawFrame","context","clearRect","canvas","width","height","beginPath","fillStyle","arc","fill","_drawObstacles","_drawDebugInfo","fillText","String","strokeStyle","moveTo","lineTo","clientHeight","stroke","clientWidth","fillRect","$14ff683d0d2d0b78$export$86fbec116b87613f","document","getElementById","getContext","dpr","window","devicePixelRatio","rawDeltaTime","performance","now","lastFrameTime","isPaused","update","bind","onPause","init","body","addEventListener","requestAnimationFrame","frameTime","$deded05a08b16674$var$options","$deded05a08b16674$var$entityManager","$deded05a08b16674$var$app","setInterval"],"version":3,"file":"index.99606423.js.map"}